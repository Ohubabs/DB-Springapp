# Default values for spring-mongo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
metadata:
  labels:
    app: springapp

replicaCount: 1

selector:
  matchLabels:
    app: "springapp"

strategy:
   type: RollingUpdate
   rollingUpdate:
     maxUnavailable: 1

image:
  repository: princebabs/springapp #mylandmarktech/spring-boot-mongo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v2" #"latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: 
  app: springapp

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

serviceSelector:
    app: springapp

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ingress:
    ClassName: nginx-example
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#livenessProbe:
#  httpGet:
#    path: /
#    port: 8080
#readinessProbe:
#  httpGet:
#    path: /
#    port: 8080

#1. Get the application URL by running these commands:
#  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=spring-mongo,app.kubernetes.io/instance=spring-mongo" -o jsonpath="{.items[0].metadata.name}")
#  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
#  echo "Visit http://127.0.0.1:8080 to use your application"
#  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
#mongodb-0.mongodb-headless.konoha.svc.cluster.local:27017

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

#Mongo DB credentials

#Enter the name for an existing mongo secret
mongodbsecretName: krillin-1

#Enter the name for an existing secret key for mongo root user 
mongodbrootuserkey: MONGO_DB_USERNAME


#Enter the name for an existing secret key for mongo root password
mongodbrootpasswordkey: MONGO_DB_PASSWORD

#Enter the name for mongo db hostname
mongodbhostname: mongodb
